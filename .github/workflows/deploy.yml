name: Deploy infra & lambdas

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Python (for zipping; optional)
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Create deploy directory & zip lambdas
        run: |
          mkdir -p deploy
          zip -j deploy/new_post.zip lambda/handler.py
          zip -j deploy/convert_to_audio.zip lambda/convert_to_audio.py
          zip -j deploy/get_post.zip lambda/get_post.py
          zip -j deploy/proxy.zip lambda/proxy.py
          ls -lh deploy

      - name: Update Lambda functions
        run: |
          echo "Updating Lambda functions with CORS fixes..."
          aws lambda update-function-code --function-name content-convert-to-audio --zip-file fileb://deploy/convert_to_audio.zip
          aws lambda update-function-code --function-name content-new-post --zip-file fileb://deploy/new_post.zip  
          aws lambda update-function-code --function-name content-get-post --zip-file fileb://deploy/get_post.zip
          echo "Lambda functions updated successfully"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        working-directory: terraform
        run: |
          if [ -n "${{ secrets.TFSTATE_BUCKET }}" ]; then
            terraform init -input=false \
              -backend-config="bucket=${{ secrets.TFSTATE_BUCKET }}" \
              -backend-config="key=polly-app/terraform.tfstate" \
              -backend-config="region=${{ secrets.AWS_REGION }}" \
              -backend-config="dynamodb_table=${{ secrets.TFSTATE_LOCK_TABLE }}"
          else
            terraform init -input=false
          fi

      - name: Terraform Format & Validate
        working-directory: terraform
        run: |
          terraform fmt -check
          terraform validate

      # ðŸ‘‡ Auto-import step: ensures existing resources are tracked instead of failing
      - name: Terraform Import existing resources
        working-directory: terraform
        run: |
          # DynamoDB
          terraform import aws_dynamodb_table.posts polly_posts || true

          # IAM Roles
          terraform import aws_iam_role.lambda_new_post_role lambda_new_post_role || true
          terraform import aws_iam_role.lambda_convert_role lambda_convert_role || true
          terraform import aws_iam_role.lambda_get_role lambda_get_role || true

          # Lambda Functions
          terraform import aws_lambda_function.new_post polly-new-post || true
          terraform import aws_lambda_function.convert_to_audio polly-convert-to-audio || true
          terraform import aws_lambda_function.get_post polly-get-post || true

          # Lambda Permissions (only if they already exist in AWS)
          terraform import aws_lambda_permission.apigw_invoke_new_post polly-new-post/AllowAPIGatewayInvokeNewPost || true
          terraform import aws_lambda_permission.apigw_invoke_get_post polly-get-post/AllowAPIGatewayInvokeGetPost || true
          terraform import aws_lambda_permission.apigw_invoke_convert_to_audio polly-convert-to-audio/AllowAPIGatewayInvokeConvertToAudio || true
          terraform import aws_lambda_permission.allow_sns_invoke polly-convert-to-audio/AllowExecutionFromSNS || true

      - name: Terraform Import existing resources
        working-directory: terraform
        run: |
          terraform import aws_s3_bucket.mp3_bucket audio-storage-bucket-unique-2025 || true
          terraform import aws_dynamodb_table.posts content_posts || true
          terraform import aws_iam_role.lambda_new_post_role content_new_post_role || true
          terraform import aws_iam_role.lambda_convert_role content_convert_role || true
          terraform import aws_iam_role.lambda_get_role content_get_role || true
          terraform import aws_lambda_function.new_post content-new-post || true
          terraform import aws_lambda_function.convert_to_audio content-convert-to-audio || true
          terraform import aws_lambda_function.get_post content-get-post || true
          terraform import aws_api_gateway_rest_api.api content-api || true
          terraform import aws_sns_topic.post_topic content-processing-topic || true

      - name: Terraform Refresh
        working-directory: terraform
        run: terraform refresh

      - name: Terraform Apply website and CloudFront
        working-directory: terraform
        run: |
          terraform apply -auto-approve \
            -target=random_string.bucket_suffix \
            -target=aws_s3_bucket.website \
            -target=aws_s3_bucket_website_configuration.website \
            -target=aws_s3_bucket_public_access_block.website \
            -target=aws_s3_bucket_policy.website \
            -target=aws_s3_object.index \
            -target=aws_s3_object.styles \
            -target=aws_s3_object.scripts \
            -target=aws_cloudfront_distribution.app_distribution \
            -target=aws_lambda_function.proxy \
            -target=aws_iam_role.lambda_proxy_role \
            -target=aws_iam_role_policy.lambda_proxy_policy \
            -target=aws_api_gateway_resource.proxy_resource \
            -target=aws_api_gateway_method.proxy_method \
            -target=aws_api_gateway_integration.proxy_integration \
            -target=aws_lambda_permission.apigw_invoke_proxy \
            -target=aws_api_gateway_method_response.new_post_cors \
            -target=aws_api_gateway_integration_response.new_post_cors \
            -target=aws_api_gateway_method_response.get_post_cors \
            -target=aws_api_gateway_integration_response.get_post_cors
        timeout-minutes: 25  #timesout after 15 minutes
